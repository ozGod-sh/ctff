<?php
/**
 * Script d'Initialisation - Op√©ration PH√âNIX
 * Test et configuration de la base de donn√©es
 */

require_once __DIR__ . '/config/database.php';
require_once __DIR__ . '/config/security.php';
require_once __DIR__ . '/config/constants.php';
require_once __DIR__ . '/classes/User.php';
require_once __DIR__ . '/classes/Challenge.php';

echo "üî• INITIALISATION OP√âRATION PH√âNIX üî•\n";
echo "=====================================\n\n";

try {
    // Test de connexion √† la base de donn√©es
    echo "üìä Test de connexion √† la base de donn√©es...\n";
    $db = Database::getInstance();
    echo "‚úÖ Base de donn√©es connect√©e avec succ√®s\n\n";
    
    // Cr√©er un utilisateur admin par d√©faut
    echo "üë§ Cr√©ation de l'utilisateur administrateur...\n";
    $user = new User();
    
    // V√©rifier si admin existe d√©j√†
    $conn = $db->getConnection();
    $stmt = $conn->prepare("SELECT id FROM users WHERE email = ?");
    $stmt->execute(['admin@cybersec-bj.tech']);
    
    if (!$stmt->fetch()) {
        $adminResult = $user->register('Admin', 'admin@cybersec-bj.tech', 'AdminPhoenix2024!');
        
        if ($adminResult['success']) {
            // Mettre √† jour le r√¥le en admin
            $stmt = $conn->prepare("UPDATE users SET role = 'admin' WHERE email = ?");
            $stmt->execute(['admin@cybersec-bj.tech']);
            echo "‚úÖ Utilisateur admin cr√©√© avec succ√®s\n";
            echo "   üìß Email: admin@cybersec-bj.tech\n";
            echo "   üîë Mot de passe: AdminPhoenix2024!\n\n";
        } else {
            echo "‚ùå Erreur cr√©ation admin: " . $adminResult['message'] . "\n\n";
        }
    } else {
        echo "‚ÑπÔ∏è  Utilisateur admin d√©j√† existant\n\n";
    }
    
    // Cr√©er un utilisateur test
    echo "üß™ Cr√©ation d'un utilisateur de test...\n";
    $stmt = $conn->prepare("SELECT id FROM users WHERE email = ?");
    $stmt->execute(['test@cybersec-bj.tech']);
    
    if (!$stmt->fetch()) {
        $testResult = $user->register('TestUser', 'test@cybersec-bj.tech', 'TestUser123!');
        
        if ($testResult['success']) {
            echo "‚úÖ Utilisateur test cr√©√© avec succ√®s\n";
            echo "   üìß Email: test@cybersec-bj.tech\n";
            echo "   üîë Mot de passe: TestUser123!\n\n";
        } else {
            echo "‚ùå Erreur cr√©ation utilisateur test: " . $testResult['message'] . "\n\n";
        }
    } else {
        echo "‚ÑπÔ∏è  Utilisateur test d√©j√† existant\n\n";
    }
    
    // V√©rification des d√©fis
    echo "üéØ V√©rification des d√©fis...\n";
    $challenge = new Challenge();
    $challenges = $challenge->getAllChallenges();
    echo "‚úÖ " . count($challenges) . " d√©fis configur√©s\n";
    
    foreach ($challenges as $ch) {
        echo "   - " . $ch['name'] . " (" . $ch['points'] . " points)\n";
    }
    echo "\n";
    
    // Test des fonctions de s√©curit√©
    echo "üõ°Ô∏è  Test des fonctions de s√©curit√©...\n";
    $testToken = Security::generateCSRFToken();
    echo "‚úÖ G√©n√©ration token CSRF: " . substr($testToken, 0, 16) . "...\n";
    
    $testHash = Security::hashPassword('test123');
    $testVerify = Security::verifyPassword('test123', $testHash);
    echo "‚úÖ Hash/Verify mot de passe: " . ($testVerify ? 'OK' : 'ERREUR') . "\n";
    
    $testIP = Security::getClientIP();
    echo "‚úÖ D√©tection IP client: " . $testIP . "\n\n";
    
    // Test de validation des flags
    echo "üö© Test de validation des flags...\n";
    $flag1Test = Security::validateCTFFlag('Zane Cipher', 1);
    echo "‚úÖ D√©fi 1 - 'Zane Cipher': " . ($flag1Test ? 'VALIDE' : 'INVALIDE') . "\n";
    
    $flag2Test = Security::validateCTFFlag('<img src=x onerror=alert(1)>', 2);
    echo "‚úÖ D√©fi 2 - XSS payload: " . ($flag2Test ? 'VALIDE' : 'INVALIDE') . "\n";
    
    $flag3Test = Security::validateCTFFlag('PHENIX{SSH_PORT:2222_IP:192.168.42.1_PASS:Zane<3Phenix_2024!}', 3);
    echo "‚úÖ D√©fi 3 - JWT flag: " . ($flag3Test ? 'VALIDE' : 'INVALIDE') . "\n";
    
    $flag4Test = Security::validateCTFFlag('ELLE-EST-PARTIE-A-JAMAIS-PAR-LEUR-FAUTE', 4);
    echo "‚úÖ D√©fi 4 - SSH fragments: " . ($flag4Test ? 'VALIDE' : 'INVALIDE') . "\n";
    
    $flag5Test = Security::validateCTFFlag('PHENIX{ULTIMATE_VICTORY_BL4CKH4T_NEUTRALIZED}', 5);
    echo "‚úÖ D√©fi 5 - Final challenge: " . ($flag5Test ? 'VALIDE' : 'INVALIDE') . "\n\n";
    
    // Statistiques base de donn√©es
    echo "üìà Statistiques de la base de donn√©es:\n";
    $stmt = $conn->query("SELECT COUNT(*) as count FROM users");
    $userCount = $stmt->fetch()['count'];
    echo "   - Utilisateurs: $userCount\n";
    
    $stmt = $conn->query("SELECT COUNT(*) as count FROM challenges");
    $challengeCount = $stmt->fetch()['count'];
    echo "   - D√©fis: $challengeCount\n";
    
    $stmt = $conn->query("SELECT COUNT(*) as count FROM submissions");
    $submissionCount = $stmt->fetch()['count'];
    echo "   - Soumissions: $submissionCount\n";
    
    $stmt = $conn->query("SELECT COUNT(*) as count FROM sessions");
    $sessionCount = $stmt->fetch()['count'];
    echo "   - Sessions actives: $sessionCount\n\n";
    
    // URLs d'acc√®s
    echo "üåê URLs d'acc√®s:\n";
    echo "   - Page d'accueil: /index.html\n";
    echo "   - Connexion: /backend/pages/login.php\n";
    echo "   - Dashboard admin: /backend/pages/dashboard-admin.php\n";
    echo "   - Dashboard user: /backend/pages/dashboard-user.php\n";
    echo "   - API auth: /backend/api/auth.php\n\n";
    
    // Nettoyage des sessions expir√©es
    echo "üßπ Nettoyage des sessions expir√©es...\n";
    $cleanedSessions = $user->cleanExpiredSessions();
    echo "‚úÖ $cleanedSessions sessions expir√©es supprim√©es\n\n";
    
    echo "üéâ INITIALISATION TERMIN√âE AVEC SUCC√àS!\n";
    echo "=====================================\n";
    echo "La plateforme CTF Op√©ration PH√âNIX est pr√™te !\n\n";
    
    // Informations importantes
    echo "‚ÑπÔ∏è  INFORMATIONS IMPORTANTES:\n";
    echo "- Assurez-vous que le serveur web a les droits d'√©criture sur le dossier /backend/database/\n";
    echo "- Le fichier de base de donn√©es est cr√©√© automatiquement\n";
    echo "- Les logs sont stock√©s dans /backend/logs/\n";
    echo "- Mode maintenance: fichier .maintenance dans /backend/\n\n";
    
} catch (Exception $e) {
    echo "‚ùå ERREUR LORS DE L'INITIALISATION:\n";
    echo $e->getMessage() . "\n\n";
    echo "Stack trace:\n";
    echo $e->getTraceAsString() . "\n";
    exit(1);
}

// Test de performance simple
echo "‚ö° Test de performance simple...\n";
$startTime = microtime(true);

for ($i = 0; $i < 100; $i++) {
    Security::generateCSRFToken();
}

$endTime = microtime(true);
$duration = ($endTime - $startTime) * 1000;
echo "‚úÖ 100 g√©n√©rations de tokens CSRF: " . round($duration, 2) . "ms\n\n";

echo "üöÄ Syst√®me pr√™t pour l'Op√©ration PH√âNIX !\n";
?>